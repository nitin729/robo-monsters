{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+SAIaA,G,YAAO,SAACC,GAAD,OAClB,sBAAKC,UAAY,iBAAjB,UACA,qBACEC,IAAO,UACPC,IAAG,+BAA4BH,EAAMI,QAAQC,GAA1C,4BACL,mCAAOL,EAAMI,QAAQE,KAArB,OACA,kCAAMN,EAAMI,QAAQG,MAApB,YCJWC,G,MAAW,SAACR,GAAD,OACpB,qBAAKC,UAAU,WAAf,SAEED,EAAMS,SAASC,KAAI,SAACN,GAAD,OAAc,cAAC,EAAD,CAAuBA,QAAWA,GAAvBA,EAAQC,WCL7CM,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACvB,uBACEZ,UAAY,SACZa,KAAK,SACLF,YAAgBA,EAChBG,SAAWF,MCiCAG,E,kDAnCb,aAAe,IAAD,8BACZ,gBAaFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,YAAcF,EAAEG,OAAOC,SAbvC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IAJH,E,gEAQO,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKT,SAAS,CAACT,SAAUkB,S,+BAOlC,IAAD,EAC2BC,KAAKN,MAA/Bb,EADD,EACCA,SAAUU,EADX,EACWA,YACZU,EAAmBpB,EAASqB,QAAO,SAAC1B,GAAD,OACvCA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAElD,OACE,sBAAK9B,UAAU,MAAf,UACA,+CACA,cAAC,EAAD,CACEW,YAAc,kBACdC,aAAgBe,KAAKf,eACvB,cAAC,EAAD,CAAUJ,SAAYoB,W,GA9BVI,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.7d075e01.chunk.js","sourcesContent":["import React from 'react';\n\nimport './card.styles.css';\n\nexport const Card = (props) => (\n  <div className = 'card-container'>\n  <img \n    alt = {\"monster\"} \n    src = {`https://robohash.org/${props.monster.id}?set=set4&size=200x200`} />\n  <h2> { props.monster.name } </h2>\n  <p> { props.monster.email } </p>\n </div>\n );\n","import React from 'react';\n\nimport { Card } from '../card/card.component'\n\nimport './card-list.style.css';\n\nexport const CardList = (props) => (\n    <div className=\"cardlist\">\n    {\n      props.monsters.map((monster) =>( <Card key={monster.id} monster = {monster}/>)\n      )}\n    </div>\n  );","import React from 'react';\n\nimport './search-box.style.css';\n\nexport const SearchBox = ({ placeholder, handleChange }) => (\n  <input \n    className = 'search'\n    type='search' \n    placeholder = { placeholder }\n    onChange={ handleChange }/>\n);","import React, { Component } from 'react';\nimport './App.css';\nimport { CardList } from './components/card-list/card-list.component'\n\nimport { SearchBox } from './components/search-box/search-box.component';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: ''\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then((response) => response.json())\n    .then((users) => this.setState({monsters: users}))\n  }\n\n  handleChange = (e) => {\n    this.setState({ searchField : e.target.value})\n  }\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter((monster) => \n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    )\n    return (\n      <div className=\"App\">\n      <h1> Robo-Monster</h1>\n      <SearchBox\n        placeholder = 'search monsters'\n        handleChange = {this.handleChange} />\n      <CardList monsters = {filteredMonsters}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}